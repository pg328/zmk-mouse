/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <2 3 4>;
        };

        FN {
            bindings = <&sl 3>;
            key-positions = <36 37 38>;
        };
    };

    behaviors {
        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            flavor = "tap-preferred";
        };

        comma_lbrace: comma_lbrace {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_LBRACE";
            bindings = <&kp COMMA>, <&kp LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_rbrace: dot_rbrace {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_RBRACE";
            bindings = <&kp PERIOD>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mouse_mod_tap: mouse_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MOUSE_MOD_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            flavor = "tap-preferred";
        };

        undo_redo: undo_redo {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDO_REDO";
            bindings = <&kp K_UNDO>, <&kp K_REDO>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        plus_equals: plus_equals {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_EQUALS";
            bindings = <&kp PLUS>, <&kp KP_EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        triple_tap_mouse_layer: triple_tap_mouse_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "TRIPLE_TAP_MOUSE_LAYER";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&none>, <&tog 4>;
        };

        lbracket_lparen: lbracket_lparen {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRACKET_LPAREN";
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rbracket_rparen: rbracket_rparen {
            compatible = "zmk,behavior-mod-morph";
            label = "RBRACKET_RPAREN";
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q           &kp W  &kp E  &kp R  &kp T        &kp Y                 &kp U  &kp I         &kp O        &kp P                    &none
&none  &kp A           &kp S  &kp D  &kp F  &kp G        &kp H                 &kp J  &kp K         &kp L        &kp SEMI                 &none
&none  &kp LEFT_SHIFT  &kp Z  &kp X  &kp C  &kp V        &kp B                 &kp N  &kp M         &key_repeat  &triple_tap_mouse_layer  &none
                              &mo 5  &mo 2  &kp LCTRL    &hold_tap LGUI SPACE  &mo 1  &kp LEFT_ALT
            >;

            label = "Layer 1";
        };

        nav_media {
            bindings = <
&none  &kp ESC         &kp C_PREV            &kp C_PLAY_PAUSE  &kp C_NEXT            &bl BL_INC    &kp HOME            &kp PAGE_DOWN    &kp PG_UP     &kp END              &kp BACKSPACE  &none
&none  &kp TAB         &kp C_VOLUME_DOWN     &kp C_MUTE        &kp C_VOLUME_UP       &mo 4         &kp LEFT            &kp DOWN_ARROW   &kp UP_ARROW  &kp RIGHT            &kp ENTER      &none
&none  &kp LEFT_SHIFT  &kp C_BRIGHTNESS_DEC  &kp LG(LCTRL)     &kp C_BRIGHTNESS_INC  &bl BL_DEC    &kp LA(LEFT_ARROW)  &kp LS(LC(TAB))  &kp LC(TAB)   &kp LA(RIGHT_ARROW)  &trans         &none
                                             &trans            &trans                &trans        &trans              &trans           &trans
            >;

            label = "Navigation And Media";
        };

        num_sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp ESCAPE      &lbracket_lparen  &kp DOUBLE_QUOTES  &rbracket_rparen  &kp HASH                &kp EQUAL  &kp N7        &kp N8        &kp N9        &kp DELETE  &none
&none  &kp TAB         &comma_lbrace     &kp SINGLE_QUOTE   &dot_rbrace       &kp NON_US_HASH         &kp MINUS  &kp N4        &kp N5        &kp N6        &kp RET     &none
&none  &kp LEFT_SHIFT  &kp LESS_THAN     &kp GRAVE          &kp GREATER_THAN  &kp NON_US_BACKSLASH    &kp PLUS   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans      &none
                                         &kp LEFT_ALT       &trans            &trans                  &trans     &trans        &kp N0
            >;

            label = "Numbers and Symbols";
        };

        fn {
            bindings = <
&none  &none         &bt BT_PRV    &bt BT_CLR    &bt BT_NXT    &none           &kp F12  &kp F7  &kp F8  &kp F9  &kp DELETE  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp F11  &kp F4  &kp F5  &kp F6  &trans      &none
&none  &none         &none         &none         &none         &none           &kp F10  &kp F1  &kp F2  &kp F3  &trans      &none
                                   &trans        &trans        &trans          &trans   &trans  &trans
            >;

            label = "Functions and System";
        };

        mouse {
            bindings = <
&trans  &trans  &trans      &trans     &trans      &trans         &mwh SCROLL_LEFT  &mwh SCROLL_DOWN  &mwh SCROLL_UP  &mwh SCROLL_RIGHT  &kp BACKSPACE  &trans
&trans  &trans  &trans      &trans     &trans      &trans         &mmv MOVE_LEFT    &mmv MOVE_DOWN    &mmv MOVE_UP    &mmv MOVE_RIGHT    &kp ENTER      &trans
&trans  &trans  &undo_redo  &kp K_CUT  &kp K_COPY  &kp K_PASTE    &kp ESCAPE        &mkp MB1          &mkp MB3        &mkp MB2           &tog 4         &trans
                            &none      &trans      &trans         &mkp MB2          &mkp MB1          &trans
            >;

            label = "Mouse";
        };

        scts {
            bindings = <
&none   &kp LS(LA(LC(LG(Q))))  &kp LS(LA(LC(LG(W))))  &kp LS(LA(LC(LG(E))))  &kp LS(LA(LC(LG(R))))  &kp LS(LA(LC(LG(T))))    &kp Y             &kp U                   &kp I                 &kp O                    &kp LC(LS(P))  &trans
&none   &kp LS(LA(LC(LG(A))))  &kp LS(LA(LC(LG(S))))  &kp LS(LA(LC(LG(D))))  &mo 3                  &kp LS(LA(LC(LG(G))))    &kp LC(LG(LEFT))  &kp LC(LG(DOWN_ARROW))  &kp LC(LG(UP_ARROW))  &kp LC(LG(RIGHT_ARROW))  &kp SEMI       &trans
&trans  &kp CAPSLOCK           &kp K_UNDO             &kp K_CUT              &kp K_COPY             &kp K_PASTE              &kp B             &kp LC(LS(N))           &kp M                 &kp DOT                  &kp FSLH       &trans
                                                      &trans                 &trans                 &trans                   &kp LG(SPACE)     &trans                  &trans
            >;

            label = "Shortcuts";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
